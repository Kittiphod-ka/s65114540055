services:
  postgres:
    image: postgres:17
    restart: always
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${PG_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - slicer-net1

  frontend:
    build: ./frontend
    env_file:
      - .env
    ports:
      - "${FRONT_END}:${FRONT_END}"
    volumes:
      - ./frontend:/app
    stdin_open: true
    tty: true
    depends_on:
      - backend

  admin:
    build: ./admin-dashboard
    env_file:
      - .env
    ports:
      - "${ADMIN_PORT}"
    networks:
      - slicer-net1

  importer:
    build:
      context: .
      dockerfile: docker/importer.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./mongo-backup:/app/mongo-backup:ro
      - ./backend:/app/backend:ro
      - ./docker/mongo_to_postgres_import.js:/app/mongo_to_postgres_import.js:ro
    command: ["node", "mongo_to_postgres_import.js", "--dir", "./mongo-backup", "--sync"]

  nginx:
    image: nginx:stable-alpine
    container_name: s65114540055-nginx
    depends_on:
      - backend
      - admin
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./admin-dashboard/src/index.html:/usr/share/nginx/html/index.html:ro
    restart: unless-stopped
    networks:
      - slicer-net1
    
  
volumes:
  postgres-data:

networks:
  slicer-net1:
    external: true