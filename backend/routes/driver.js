const express = require("express");
const router = express.Router();
const { Driver, Booking, SlideCar } = require("../models");
const authMiddleware = require("../middleware/authMiddleware");

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/all", async (req, res) => {
  try {
    const drivers = await Driver.findAll({ order: [["id", "ASC"]] });
    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error fetching drivers:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
router.get("/", async (req, res) => {
  try {
    const drivers = await Driver.findAll({ order: [["id", "ASC"]] });
    res.json(drivers);
  } catch (error) {
    console.error("‚ùå Error fetching drivers:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// üìå ‡∏î‡∏∂‡∏á "‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏±‡∏ö
router.get("/driver/orders", async (req, res) => {
  try {
    const orders = await Booking.findAll({ where: { status: "‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" } });
    res.json(orders);
  } catch (error) {
    console.error("‚ùå Error fetching driver orders:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

// üìå ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
router.post("/driver/accept-order", async (req, res) => {
  const { order_id, driver_id } = req.body;
  try {
    const order = await Booking.findByPk(order_id);
    if (!order) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ" });

    order.status = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    order.driver_id = driver_id;
    await order.save();

    res.json({ message: "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", order });
  } catch (error) {
    console.error("‚ùå Error updating order:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô" });
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.get("/status/:driverId", async (req, res) => {
  try {
    const driver = await Driver.findByPk(req.params.driverId);
    if (!driver) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" });

    res.json({ status: driver.status });
  } catch (error) {
    console.error("‚ùå Error fetching driver status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.post("/update-status", async (req, res) => {
  try {
    const { driver_id, status } = req.body;
    const driver = await Driver.findByPk(driver_id);
    if (!driver) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" });
    }
    driver.status = status;
    await driver.save();
    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", status: driver.status });
  } catch (error) {
    console.error("‚ùå Error updating driver status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
router.post("/", async (req, res) => {
  try {
    const { username, name, password, phone, status } = req.body;
    const newDriver = await Driver.create({ username, name, password, phone, status });
    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", newDriver });
  } catch (error) {
    console.error("‚ùå Error adding driver:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  }
});

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
router.get("/:id", authMiddleware, async (req, res) => {
  try {
    const driver = await Driver.findByPk(req.params.id);
    if (!driver) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!" });
    }
    res.json(driver);
  } catch (err) {
    console.error("‚ùå Error fetching driver:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.put("/:id", async (req, res) => {
  try {
    const id = Number(req.params.id); // ‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô number
    const { name, phone, status } = req.body;
    const driver = await Driver.findByPk(id);
    if (!driver) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!" });
    }
    driver.name = name;
    driver.phone = phone;
    driver.status = status;
    await driver.save();
    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", driver });
  } catch (error) {
    console.error("‚ùå Error updating driver:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ!" });
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
router.put("/update-status/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    const slideCar = await SlideCar.findByPk(id);
    if (!slideCar) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡πÑ‡∏•‡∏î‡πå!" });
    slideCar.status = status;
    await slideCar.save();
    res.json(slideCar);
  } catch (error) {
    console.error("‚ùå Error updating status:", error);
    res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ!" });
  }
});

// üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    const id = req.params.id;
    if (!id) {
      return res.status(400).json({ message: '‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!' });
    }

    const driver = await Driver.findByPk(id);
    if (!driver) {
      return res.status(404).json({ message: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!' });
    }

    await driver.destroy();
    res.json({ message: '‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
  } catch (error) {
    console.error('‚ùå Error deleting driver:', error);
    res.status(500).json({ message: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö!' });
  }
});

module.exports = router;