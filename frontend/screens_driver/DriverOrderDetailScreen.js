import React, { useEffect, useState, useRef } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Alert, Linking } from "react-native";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import MapView, { Marker, Polyline } from "react-native-maps";
import BottomNavigationMenu from "../components/BottomNavigationMenu";
import * as Location from "expo-location";

export default function DriverOrderDetailScreen({ route, navigation }) {
  const { bookingData } = route.params;
  const [driverId, setDriverId] = useState(null);
  const [driverLocation, setDriverLocation] = useState(null);
  const [routeCoords, setRouteCoords] = useState([]);
  const [status2, setStatus2] = useState(bookingData.status2 || "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö");

  const notifiedPickup = useRef(false);
  const notifiedDropoff = useRef(false);
  const intervalId = useRef(null);

  useEffect(() => {
    fetchDriverId();
    fetchBookingStatus();
    startTrackingDriver();
    return () => clearInterval(intervalId.current);
  }, []);

  useEffect(() => {
    if (driverLocation) {
      setRouteCoords([]);
      fetchRoute(status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö" ? bookingData.pickup_location : bookingData.dropoff_location);
    }
  }, [status2, driverLocation]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Database
  const fetchBookingStatus = async () => {
    try {
      const response = await axios.get(`http://10.0.2.2:30055/api/bookings/get-status2/${bookingData._id}`);
      
      if (response.data && response.data.status2) {
        console.log("üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", response.data.status2);
        setStatus2(response.data.status2);
      }
    } catch (error) {
      console.error("‚ùå Error fetching booking status2:", error.response?.data || error);
    }
  };

  const fetchDriverId = async () => {
    const storedDriverId = await AsyncStorage.getItem("user_id");
    setDriverId(storedDriverId);
  };

  const updateDriverLocation = async () => {
    try {
      if (bookingData.status !== "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£") return; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        Alert.alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
        return;
      }

      const location = await Location.getCurrentPositionAsync({ accuracy: Location.Accuracy.High });
      const { latitude, longitude } = location.coords;
      setDriverLocation({ latitude, longitude });

      await axios.post("http://10.0.2.2:30055/api/bookings/update-driver-location", {
        bookingId: bookingData._id, 
        latitude,
        longitude,
        driverId,
      });

      checkArrival({ latitude, longitude });

    } catch (error) {
      console.error("‚ùå Error updating driver location:", error.response?.data || error);
    }
  };

  const fetchRoute = async (destination) => {
    try {
      if (!driverLocation) return;

      console.log(`üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ${status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö" ? "‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö" : "‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á"}`);

      const response = await axios.get(
        `https://router.project-osrm.org/route/v1/driving/${driverLocation.longitude},${driverLocation.latitude};${destination.longitude},${destination.latitude}?overview=full&geometries=geojson`
      );

      if (response.data && response.data.routes.length > 0) {
        const coordinates = response.data.routes[0].geometry.coordinates.map(([lng, lat]) => ({ latitude: lat, longitude: lng }));
        setRouteCoords(coordinates);
      }
    } catch (error) {
      console.error("‚ùå Error fetching route:", error);
    }
  };

  const handleAcceptOrder = async () => {
    if (!driverId) {
        Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà");
        return;
    }

    try {
        const response = await axios.post("http://10.0.2.2:30055/api/bookings/update-status", {
            _id: bookingData._id,
            status: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
            driver_id: driverId,
        });

        console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);
        Alert.alert("‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!");

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö UI
        navigation.reset({
            index: 0,
            routes: [{ name: "DriverOrderListScreen" }],
        });

    } catch (error) {
        console.error("‚ùå Error accepting order:", error);
        Alert.alert("‚ùå ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
};

const handleCancelOrder = async () => {
  if (!driverId) {
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà");
      return;
  }

  try {
      const response = await axios.post("http://10.0.2.2:30055/api/bookings/cancel-order", {
          _id: bookingData._id,
          status: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
          driver_id: driverId,
      });

      console.log("üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);
      Alert.alert("üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!");

      navigation.reset({
          index: 0,
          routes: [{ name: "DriverOrderListScreen" }],
      });

  } catch (error) {
      console.error("‚ùå Error canceling order:", error);
      Alert.alert("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  }
};

  const checkArrival = async (driverPos) => {
    const target = status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö" ? bookingData.pickup_location : bookingData.dropoff_location;
    const distance = getDistance(driverPos, target);

    if (distance < 100) {  
      if (status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö" && !notifiedPickup.current) {
        notifiedPickup.current = true;
        Alert.alert("üìå ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á...");
        setStatus2("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á");

        await axios.post(`http://10.0.2.2:30055/api/bookings/update-status2`, {
          _id: bookingData._id,
          status2: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á",
        });

        fetchRoute(bookingData.dropoff_location);
      } else if (status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á" && !notifiedDropoff.current) {
        notifiedDropoff.current = true;
        Alert.alert("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!", "‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß");

        await axios.post(`http://10.0.2.2:30055/api/bookings/update-status2`, {
          _id: bookingData._id,
          status2: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        });

        setStatus2("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
      }
    }
  };

  const startTrackingDriver = () => {
    intervalId.current = setInterval(updateDriverLocation, 30055);
  };

  const getDistance = (pos1, pos2) => {
    const R = 6371000;
    const dLat = (pos2.latitude - pos1.latitude) * (Math.PI / 180);
    const dLon = (pos2.longitude - pos1.longitude) * (Math.PI / 180);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(pos1.latitude * (Math.PI / 180)) * Math.cos(pos2.latitude * (Math.PI / 180)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  };

  //‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ map
  const openGoogleMaps = () => {
    if (!driverLocation) {
        Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ô‡∏≥‡∏ó‡∏≤‡∏á", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î");
        return;
    }

    // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
    const destination = status2 === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö"
        ? `${bookingData.pickup_location.latitude},${bookingData.pickup_location.longitude}`
        : `${bookingData.dropoff_location.latitude},${bookingData.dropoff_location.longitude}`;

    const url = `https://www.google.com/maps/dir/?api=1&origin=${driverLocation.latitude},${driverLocation.longitude}&destination=${destination}&travelmode=driving`;
    
    Linking.openURL(url);
  };

  // //‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡πÅ‡∏≠‡∏û
  // const navigateToNavigationScreen = () => {
  //   navigation.navigate("NavigationScreen", {
  //       pickup: bookingData.pickup_location,
  //       dropoff: bookingData.dropoff_location
  //   });
  // };

  const handleCompleteOrder = async () => {
    await axios.post(`http://10.0.2.2:30055/api/bookings/update-status/:id`, {
      _id: bookingData._id,
      status: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
      driver_id: driverId,
    });

    Alert.alert("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    navigation.reset({
      index: 0,
      routes: [{ name: "DriverOrderListScreen" }],
    });
  };

  return (
    <View style={styles.container}>
      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
      <MapView
        style={styles.map}
        initialRegion={{
          latitude: bookingData.pickup_location.latitude,
          longitude: bookingData.pickup_location.longitude,
          latitudeDelta: 0.05,
          longitudeDelta: 0.05,
        }}
      >
        <Marker coordinate={bookingData.pickup_location} title="‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö" />
        <Marker coordinate={bookingData.dropoff_location} title="‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á" />
        {driverLocation && (
          <Marker coordinate={driverLocation} title="üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö" pinColor="green" />
        )}

        {routeCoords.length > 0 && <Polyline coordinates={routeCoords} strokeWidth={4} strokeColor="blue" />}
      </MapView>

      {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô */}
      <View style={styles.detailContainer}>
        <Text style={styles.title}>üöó ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ</Text>
        <Text style={styles.info}>üìç ‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö: {bookingData.pickup_location.latitude}, {bookingData.pickup_location.longitude || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>
        <Text style={styles.info}>üìç ‡∏à‡∏∏‡∏î‡∏™‡πà‡∏á: {bookingData.dropoff_location.latitude}, {bookingData.dropoff_location.longitude || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>
        <Text style={styles.info}>üõ£Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {bookingData.distance.toFixed(1)} ‡∏Å‡∏°.</Text>
        <Text style={styles.info}>üí∞ ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á: {bookingData.total_price} ‡∏ö‡∏≤‡∏ó</Text>
        <Text style={styles.info}>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {bookingData.note}</Text>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
        <Text style={styles.title}>üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Text>
        <Text style={styles.info}>üë§ {bookingData.name}</Text>
        <Text style={styles.info}>üìû {bookingData.user_phone}</Text>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô */}
        <View style={styles.buttonRow}>
          {bookingData.status === "‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô" && (
            <>
            <TouchableOpacity style={styles.acceptButton} onPress={handleAcceptOrder}>
              <Text style={styles.buttonText}>‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.cancelButton} onPress={handleCancelOrder}>
            <Text style={styles.buttonText}>üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô</Text>
            </TouchableOpacity>
            </>
          )}

          {bookingData.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" && (
            <>
              <TouchableOpacity style={styles.mapButton} onPress={openGoogleMaps}>
                <Text style={styles.buttonText}>üó∫Ô∏è ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á</Text>
              </TouchableOpacity>

              {/* <TouchableOpacity style={styles.mapButton} onPress={navigateToNavigationScreen}>
                <Text style={styles.buttonText}>üó∫Ô∏è ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á</Text>
              </TouchableOpacity> */}
              <TouchableOpacity style={styles.completeButton} onPress={handleCompleteOrder}>
                <Text style={styles.buttonText}>‚úÖ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</Text>
              </TouchableOpacity>
            </>
          )}

          {bookingData.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" && (
            <TouchableOpacity 
            style={styles.summaryButton} 
            onPress={() => navigation.navigate("DriverOrderSummaryScreen", { bookingData })}
          >
            <Text style={styles.buttonText}>üìã ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Text>
          </TouchableOpacity>
          )}
        </View>
      </View>
    <BottomNavigationMenu />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f9f9f9" },
  map: { width: "100%", height: "50%" },
  detailContainer: { padding: 15, backgroundColor: "#fff", borderTopLeftRadius: 20, borderTopRightRadius: 20 },
  title: { fontSize: 18, fontWeight: "bold", marginBottom: 10 },
  info: { fontSize: 16, marginBottom: 5 },
  buttonRow: { flexDirection: "row", justifyContent: "center", marginTop: 10 },
  acceptButton: { flex: 1, backgroundColor: "#007bff", padding: 12, borderRadius: 10, alignItems: "center" },
  mapButton: { flex: 1, backgroundColor: "#17a2b8", padding: 12, borderRadius: 10, alignItems: "center", marginRight: 5 },
  completeButton: { flex: 1, backgroundColor: "#28a745", padding: 12, borderRadius: 10, alignItems: "center", marginLeft: 5 },
  summaryButton: { flex: 1, backgroundColor: "#ffc107", padding: 12, borderRadius: 10, alignItems: "center" },
  buttonText: { color: "#fff", fontWeight: "bold" },
  cancelButton: {
    flex: 1,
    backgroundColor: "#dc3545", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    padding: 12,
    borderRadius: 10,
    alignItems: "center",
    marginLeft: 5,
  },
});