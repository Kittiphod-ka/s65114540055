import React, { useState, useEffect } from "react";
import { View, Text, ActivityIndicator, Alert } from "react-native";
import { WebView } from "react-native-webview";
import { useNavigation } from "@react-navigation/native";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";

const PaymentScreen = ({ route }) => {
  const { paymentUrl, bookingId } = route.params || {};
  const navigation = useNavigation();
  const [loading, setLoading] = useState(true);
  const [urlLoaded, setUrlLoaded] = useState(false); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î WebView ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô

  useEffect(() => {
    if (!paymentUrl) {
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
      navigation.goBack(); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      return;
    }

    setUrlLoaded(true);
  }, [paymentUrl]);

  const handleWebViewNavigation = (event) => {
    const { url } = event;
    console.log("üì¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö URL:", url);

    if (url.includes("payment-success")) {
        const urlParams = new URLSearchParams(url.split("?")[1]);
        const _id = urlParams.get("_id"); // ‚úÖ ‡∏î‡∏∂‡∏á `_id` ‡∏à‡∏≤‡∏Å URL

        console.log("‚úÖ _id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", _id);

        if (_id && _id !== "undefined") {  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ `_id` ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            confirmPayment(_id);
        } else {
            Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
        }
    }
};

const confirmPayment = async (_id) => {
    try {
        const token = await AsyncStorage.getItem("token");

        await axios.post(
            "http://10.0.2.2:40055/api/payment/confirm-payment",
            { _id }, // ‚úÖ ‡∏™‡πà‡∏á `_id` ‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            { headers: { Authorization: `Bearer ${token}` } }
        );

        Alert.alert("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
        navigation.navigate("HomeScreen"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
    } catch (error) {
        console.error("‚ùå Error updating booking:", error);
        Alert.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
    }
};

  return (
    <View style={{ flex: 1 }}>
      {urlLoaded ? (
        <WebView
          source={{ uri: paymentUrl }}
          onLoadStart={() => setLoading(true)}
          onLoad={() => setLoading(false)}
          onNavigationStateChange={handleWebViewNavigation}
        />
      ) : (
        <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
          <ActivityIndicator size="large" color="#FF4081" />
          <Text>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</Text>
        </View>
      )}
    </View>
  );
};

export default PaymentScreen;
